select * from event;
select * from booking;
select * from customer;
select * from venue;

-- 3.1 List Events and Their Average Ticket Prices

select event_name, avg(ticket_price) as avg_price
from event
group by event_name;
-- 3.2 Calculate the Total Revenue Generated by Events

select sum(num_tickets*ticket_price) as total_revenue
from booking b
inner join event e on b.event_id=e.event_id;

-- 3.3 find the event with the highest ticket sales

select e.event_id,e.event_name,sum(b.num_tickets) as tickets_sold
from booking b
inner join event e on b.event_id=e.event_id
group by e.event_id, e.event_name
limit 1;

-- 3.4 Calculate the Total Number of Tickets Sold for Each Event

select e.event_id,e.event_name,sum(b.num_tickets) as tickets_sold
from booking b
inner join event e on b.event_id=e.event_id
group by e.event_id,e.event_name;

-- 3.5 Find Events with No Ticket Sales

select e.event_id,e.event_name 
from event e
left join booking b on e.event_id=b.event_id 
where b.event_id is null; 

-- 3.6 Find the User Who Has Booked the Most Tickets

select b.customer_id,customer_name,sum(num_tickets) as tickets_sold
from booking b
join customer c on b.customer_id=c.customer_id
group by b.customer_id
order by tickets_sold desc
limit 1;

-- 3.7 List Events and the Total Number of Tickets Sold for Each Month

select e.event_id,e.event_name,monthname(b.booking_date) as booking_month,year(b.booking_date) as booking_year,sum(b.num_tickets) as tickets_sold
from event e
join booking b on e.event_id=b.event_id
group by e.event_id,e.event_name,monthname(b.booking_date),year(b.booking_date)
order by booking_year,booking_month;

select event_name,month(booking_date) as month ,sum(num_tickets) as total_sold
from booking
join event using(event_id)
group by month(booking_date),event_name
order by 3 desc;

-- 3.8 Calculate the Average Ticket Price for Events in Each Venue

select e.venue_id,e.event_id,e.event_name,avg(ticket_price) as average_ticket_price
from event as e
group by e.venue_id,e.event_id,e.event_name;

-- 3.9 Calculate the Total Number of Tickets Sold for Each Event Type

select e.event_type,sum(b.num_tickets) as total_tickets_sold
from event as e
inner join booking b on e.event_id=b.event_id
group by e.event_type;

-- 3.10 Calculate the Total Revenue Generated by Events in Each Year

select year(e.event_date) as event_year, sum(b.num_tickets*e.ticket_price) as total_revenue
from event as e
join booking as b on e.event_id=b.event_id
group by year(e.event_date)
order by event_year;

-- 3.11 List Users Who Have Booked Tickets for Multiple Events

select c.customer_id,c.customer_name
from customer c
join booking b on c.customer_id=b.customer_id
group by c.customer_id,c.customer_name
having count(distinct b.event_id)>1;

-- 3.12 calculate the Total Revenue Generated by Events for Each User.

select c.customer_id, c.customer_name, sum(b.num_tickets * e.ticket_price) as total_revenue
from booking b
join customer c on b.customer_id = c.customer_id
join event e on b.event_id = e.event_id
group by c.customer_id, c.customer_name
order by total_revenue desc;

-- 3.13 calculate the Average Ticket Price for Events in Each Category and Venue.

select e.event_type,avg(ticket_price) as avg_ticket_price, v.venue_id,v.venue_name
from event e
join venue v on e.venue_id=v.venue_id
group by e.event_type,v.venue_id;

-- 3.14 list Users and the Total Number of Tickets They've Purchased in the Last 30 Days.

select c.customer_name,count(b.num_tickets) as total_tickets
from customer c
join booking b on c.booking_id=b.booking_id
where b.booking_date>=curdate()-interval 30 day
group by c.customer_name;










