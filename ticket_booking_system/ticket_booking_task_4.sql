-- 1. Calculate the Average Ticket Price for Events in Each Venue Using a Subquery

select venue_id, (select avg(ticket_price) 
from event e 
where e.venue_id=v.venue_id) as average_ticket_price
from event v
group by venue_id;

-- 2. Find Events with More Than 50% of Tickets Sold using subquery

select event_id, event_name
from event e
where (select sum(b.num_tickets) from booking b where b.event_id = e.event_id)>e.total_seats * 0.5;

-- 3. Calculate the Total Number of Tickets Sold for Each Event

select e.event_id, e.event_name, sum(b.num_tickets) as total_tickets_sold
from booking b
join event e on b.event_id = e.event_id
group by e.event_id, e.event_name;

--  4. Find Users Who Have Not Booked Any Tickets Using a NOT EXISTS Subquery

select customer_id,customer_name 
from customer c
where not exists(select * from booking b where b.customer_id=c.customer_id);


-- 5. List Events with No Ticket Sales Using a NOT IN Subquery

select event_id,event_name
from event
where event_id not in (select event_id from booking);

-- 6. Calculate the Total Number of Tickets Sold for Each Event Type Using a Subquery in the FROM Clause

select event_type, total_tickets_sold
from (select e.event_type, sum(b.num_tickets) total_tickets_sold 
      from event as e join booking b on e.event_id=b.event_id
      group by e.event_type) as T;

-- 7. Find Events with Ticket Prices Higher Than the Average Ticket Price Using a Subquery in the WHERE Clause

select event_id,event_name
from event
where ticket_price>(select avg(ticket_price) from event);

-- 8. Calculate the Total Revenue Generated by Events for Each User Using a Correlated Subquery

select c.customer_id, c.customer_name, (select sum(b.num_tickets*e.ticket_price)
from booking b
join event e on b.event_id=e.event_id where b.customer_id=c.customer_id) total_revenue
from customer c;

-- 9. List Users Who Have Booked Tickets for Events in a Given Venue Using a Subquery in the WHERE Clause

select customer_id, customer_name
from customer
where customer_id in (
  select b.customer_id
  from booking b
  join event e on b.event_id = e.event_id
  where e.venue_id = 1
);

select * from customer
where customer_id in (select b.customer_id from booking b
join event e on b.event_id = e.event_id
where e.venue_id = 1 );

-- 10. Calculate the Total Number of Tickets Sold for Each Event Category Using a Subquery with GROUP BY.

select event_type,total_tickets_sold
from(select e.event_type, sum(b.num_tickets) total_tickets_sold
     from event e 
     inner join booking b on e.event_id=b.event_id
     group by e.event_type) as T;
     
-- 11. Find Users Who Have Booked Tickets for Events in each Month Using a Subquery with DATE_FORMAT

select distinct c.customer_id, c.customer_name, date_format(b.booking_date, '%M %Y') as booking_month
from customer c
join booking b on c.customer_id = b.customer_id
order by c.customer_id, booking_month;

-- 12. Calculate the Average Ticket Price for Events in Each Venue Using a Subquery

select event_id,venue_id, (select avg(ticket_price) from event e where e.venue_id=v.venue_id) as average_ticket_price
from event v
group by venue_id,event_id;












